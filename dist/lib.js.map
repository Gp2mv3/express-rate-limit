{"version":3,"file":"lib.js","sourceRoot":"","sources":["../source/lib.ts"],"names":[],"mappings":"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","sourcesContent":["// /source/lib.ts\n// The option parser and rate limiting middleware\n\nimport Express from 'express'\n\nimport { Options, AugmentedRequest, RateLimitRequestHandler } from './types.js'\nimport MemoryStore from './memory-store.js'\n\n/**\n * Adds the defaults for options the user has not specified.\n *\n * @param options {Options} - The options the user specifies\n *\n * @returns {Options} - A complete configuration object\n */\nconst parseOptions = (passedOptions: Partial<Options>): Options => {\n\tconst {\n\t\t// Default window of time is 1 minute\n\t\twindowMs = 60 * 1000,\n\t\t// The default storage provider used is a {@link MemoryStore}\n\t\tstore = new MemoryStore(windowMs),\n\t} = passedOptions\n\n\t// Now add the defaults for the other options\n\tconst options: Options = {\n\t\twindowMs,\n\t\tstore,\n\t\tmax: 5,\n\t\tmessage: 'Too many requests, please try again later.',\n\t\tstatusCode: 429,\n\t\theaders: true,\n\t\tuseStandardizedHeaders: false,\n\t\trequestPropertyName: 'rateLimit',\n\t\tskipFailedRequests: false,\n\t\tskipSuccessfulRequests: false,\n\t\trequestWasSuccessful: (_request, response) => response.statusCode < 400,\n\t\tkeyGenerator: (request) => {\n\t\t\tif (!request.ip) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t'WARN | `express-rate-limit` | `request.ip` is undefined. You can avoid this by providing a custom `keyGenerator` function, but it may be indicative of a larger issue.',\n\t\t\t\t)\n\t\t\t}\n\n\t\t\treturn request.ip\n\t\t},\n\t\tskip: () => false,\n\t\thandler: (_request, response, _optionsUsed: Options) =>\n\t\t\tresponse.status(options.statusCode).send(options.message),\n\t\tonLimitReached: () => {},\n\t\t...passedOptions,\n\t}\n\n\t// Ensure that the store passed implements the {@link Store} interface\n\tif (\n\t\ttypeof options.store.increment !== 'function' ||\n\t\ttypeof options.store.resetKey !== 'function' ||\n\t\t(options.skipFailedRequests &&\n\t\t\ttypeof options.store.decrement !== 'function')\n\t) {\n\t\tthrow new Error(\n\t\t\t'An invalid store was passed. Please ensure that the store is a class that implements the `Store` interface.',\n\t\t)\n\t}\n\n\t// Throw an error if any deprecated options are passed\n\tconst deprecatedOptions = ['global', 'delayMs', 'delayAfter'] as Array<\n\t\tkeyof Options\n\t>\n\tfor (const option of deprecatedOptions) {\n\t\t// This doesn't trigger if any value is set to a falsy value (e.g., 0),\n\t\t// because that essentially disables them\n\t\tif (passedOptions[option]) {\n\t\t\tthrow new Error(\n\t\t\t\t`The \\`${option}\\` option is deprecated and will likely be removed from the \\`express-rate-limit\\` package in the future.`,\n\t\t\t)\n\t\t}\n\t}\n\n\t// Return the 'clean' options\n\treturn options\n}\n\n/**\n * Just pass on any errors for the developer to handle, usually as a HTTP 500\n * Internal Server Error.\n *\n * @param fn {Express.RequestHandler} - The request handler for which to handle errors\n *\n * @returns {Express.RequestHandler} - The request handler wrapped with a `.catch` clause\n *\n * @private\n */\nconst handleAsyncErrors =\n\t(fn: Express.RequestHandler): Express.RequestHandler =>\n\tasync (\n\t\trequest: Express.Request,\n\t\tresponse: Express.Response,\n\t\tnext: Express.NextFunction,\n\t) => {\n\t\ttry {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-confusing-void-expression\n\t\t\tawait Promise.resolve(fn(request, response, next)).catch(next)\n\t\t} catch (error: unknown) {\n\t\t\tnext(error)\n\t\t}\n\t}\n\n/**\n *\n * Create an instance of IP rate-limiting middleware for Express.\n *\n * @param passedOptions {Options} - Options to configure the rate limiter\n *\n * @returns {RateLimitRequestHandler} - The middleware that rate-limits clients based on your configuration\n *\n * @public\n */\nconst rateLimit = (\n\tpassedOptions?: Partial<Options>,\n): RateLimitRequestHandler => {\n\t// Parse the options and add the default values for unspecified options\n\tconst options = parseOptions(passedOptions ?? {})\n\n\t// Then return the actual middleware\n\tconst middleware = handleAsyncErrors(\n\t\tasync (\n\t\t\trequest: Express.Request,\n\t\t\tresponse: Express.Response,\n\t\t\tnext: Express.NextFunction,\n\t\t) => {\n\t\t\t// First check if we should skip the request\n\t\t\tconst skip = await Promise.resolve(options.skip(request, response))\n\t\t\tif (skip) {\n\t\t\t\tnext()\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Create an augmented request\n\t\t\tconst augmentedRequest = request as AugmentedRequest\n\n\t\t\t// Get a unique key for the client\n\t\t\tconst key = await Promise.resolve(options.keyGenerator(request, response))\n\t\t\t// Increment the client's hit counter by one\n\t\t\tconst { totalHits, resetTime } = await new Promise<{\n\t\t\t\ttotalHits: number\n\t\t\t\tresetTime: Date | undefined\n\t\t\t}>((resolve, reject) => {\n\t\t\t\toptions.store.increment(\n\t\t\t\t\tkey,\n\t\t\t\t\t(\n\t\t\t\t\t\terror: Error | undefined,\n\t\t\t\t\t\ttotalHits: number,\n\t\t\t\t\t\tresetTime: Date | undefined,\n\t\t\t\t\t) => {\n\t\t\t\t\t\tif (error) reject(error)\n\t\t\t\t\t\tresolve({ totalHits, resetTime })\n\t\t\t\t\t},\n\t\t\t\t)\n\t\t\t})\n\n\t\t\t// Get the quota (max number of hits) for each client\n\t\t\tconst retrieveQuota =\n\t\t\t\ttypeof options.max === 'function'\n\t\t\t\t\t? options.max(request, response)\n\t\t\t\t\t: options.max\n\n\t\t\tconst maxHits = await Promise.resolve(retrieveQuota)\n\t\t\t// Set the rate limit information on the augmented request object\n\t\t\taugmentedRequest[options.requestPropertyName] = {\n\t\t\t\tlimit: maxHits,\n\t\t\t\tcurrent: totalHits,\n\t\t\t\tremaining: Math.max(maxHits - totalHits, 0),\n\t\t\t\tresetTime,\n\t\t\t}\n\n\t\t\t// Set the X-RateLimit headers on the response object if enabled\n\t\t\tif (options.headers && !response.headersSent) {\n\t\t\t\tresponse.setHeader('X-RateLimit-Limit', maxHits)\n\t\t\t\tresponse.setHeader(\n\t\t\t\t\t'X-RateLimit-Remaining',\n\t\t\t\t\taugmentedRequest[options.requestPropertyName].remaining,\n\t\t\t\t)\n\n\t\t\t\t// If we have a resetTime, also provide the current date to help avoid issues with incorrect clocks\n\t\t\t\tif (resetTime instanceof Date) {\n\t\t\t\t\tresponse.setHeader('Date', new Date().toUTCString())\n\t\t\t\t\tresponse.setHeader(\n\t\t\t\t\t\t'X-RateLimit-Reset',\n\t\t\t\t\t\tMath.ceil(resetTime.getTime() / 1000),\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set the standardized RateLimit headers on the response object\n\t\t\t// if enabled\n\t\t\tif (options.useStandardizedHeaders && !response.headersSent) {\n\t\t\t\tresponse.setHeader('RateLimit-Limit', maxHits)\n\t\t\t\tresponse.setHeader(\n\t\t\t\t\t'RateLimit-Remaining',\n\t\t\t\t\taugmentedRequest[options.requestPropertyName].remaining,\n\t\t\t\t)\n\n\t\t\t\tif (resetTime) {\n\t\t\t\t\tconst deltaSeconds = Math.ceil(\n\t\t\t\t\t\t(resetTime.getTime() - Date.now()) / 1000,\n\t\t\t\t\t)\n\t\t\t\t\tresponse.setHeader('RateLimit-Reset', Math.max(0, deltaSeconds))\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we are to skip failed/successfull requests, decrement the\n\t\t\t// counter accordingly once we know the status code of the request\n\t\t\tif (options.skipFailedRequests || options.skipSuccessfulRequests) {\n\t\t\t\tlet decremented = false\n\t\t\t\tconst decrementKey = () => {\n\t\t\t\t\tif (!decremented) {\n\t\t\t\t\t\toptions.store.decrement(key)\n\t\t\t\t\t\tdecremented = true\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (options.skipFailedRequests) {\n\t\t\t\t\tresponse.on('finish', () => {\n\t\t\t\t\t\tif (!options.requestWasSuccessful(request, response)) decrementKey()\n\t\t\t\t\t})\n\t\t\t\t\tresponse.on('close', () => {\n\t\t\t\t\t\tif (!response.writableEnded) decrementKey()\n\t\t\t\t\t})\n\t\t\t\t\tresponse.on('error', () => {\n\t\t\t\t\t\tdecrementKey()\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tif (options.skipSuccessfulRequests) {\n\t\t\t\t\tresponse.on('finish', () => {\n\t\t\t\t\t\tif (options.requestWasSuccessful(request, response)) decrementKey()\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Call the {@link Options.onLimitReached} callback if\n\t\t\t// the client has reached their rate limit.\n\t\t\tif (maxHits && totalHits === maxHits + 1) {\n\t\t\t\toptions.onLimitReached(request, response, options)\n\t\t\t}\n\n\t\t\t// If the client has exceeded their rate limit, set the Retry-After\n\t\t\t// header and call the {@link Options.handler} function\n\t\t\tif (maxHits && totalHits > maxHits) {\n\t\t\t\tif (options.headers && !response.headersSent) {\n\t\t\t\t\tresponse.setHeader('Retry-After', Math.ceil(options.windowMs / 1000))\n\t\t\t\t}\n\n\t\t\t\toptions.handler(request, response, options)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tnext()\n\t\t},\n\t)\n\n\t// Export the store's function to reset the hit counter for a particular\n\t// client based on their identifier\n\t;(middleware as RateLimitRequestHandler).resetKey =\n\t\toptions.store.resetKey.bind(options.store)\n\n\treturn middleware as RateLimitRequestHandler\n}\n\n// Export it to the world!\nexport default rateLimit\n"]}